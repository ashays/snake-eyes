{"version":3,"sources":["assets/sounds/blop.mp3","assets/sounds/gong.mp3","assets/sounds/aww.mp3","assets/sounds/cheer.mp3","assets/sounds/ting.mp3","../node_modules/peerjs/dist sync","components/Home.js","components/Participant.js","components/Profile.js","components/Card.js","components/Timer.js","components/Chat.js","data/words.js","components/HotPotato.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","Home","this","props","className","to","React","Component","Participant","key","src","alt","name","undefined","score","Profile","state","handleChange","bind","handleSubmit","event","setState","target","value","trim","updateName","preventDefault","onSubmit","type","placeholder","onChange","disabled","Card","round","playing","turn","pId","player","word","Timer","remaining","getRemainingTime","start","timer","SCARY","Math","floor","duration","Date","getTime","blop","Audio","loop","timerInterval","setInterval","prevProps","play","setTimeout","isPlayersTurn","aww","gong","clearInterval","Chat","prevSender","chat","map","message","i","senderText","sender","participants","medium","randomWord","random","length","Room","isHost","match","params","connections","startRound","endRound","receive","sendChatMessage","nextTurn","peer","on","conn","setupConnection","connect","send","connection","prop","data","err","console","error","log","addToChat","announcement","ting","history","push","location","sendAndReceive","Object","pIndex","currentScore","toLowerCase","points","elements","cheer","participantsListed","entries","entry","participantScoreboard","sort","partA","partB","exact","from","path","onClick","autoComplete","withRouter","App","Peer","disconnect","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.48300397.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/blop.627c0e8b.mp3\";","module.exports = __webpack_public_path__ + \"static/media/gong.dd145efd.mp3\";","module.exports = __webpack_public_path__ + \"static/media/aww.2c3d60cd.mp3\";","module.exports = __webpack_public_path__ + \"static/media/cheer.c597f127.mp3\";","module.exports = __webpack_public_path__ + \"static/media/ting.b0da548d.mp3\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 50;","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport './Home.css';\n\nclass Home extends React.Component {\n  render() {\n    return (\n        <div>\n            {this.props.id &&\n                <div className=\"container\" id=\"lobby\">\n                  <div className=\"instructions\">\n                      <h1>Hot Potato</h1>\n                      <p>60 seconds on the clock. Take turns describing words to the other players. Correctly guess as many as you can, as quickly as you can—but don't let the timer end on your turn or you might lose it all.</p>\n                      <Link to={\"hotpotato/\" + this.props.id} className=\"button\">Create Room</Link>\n                  </div>\n                </div>\n            }            \n        </div>\n    );\n  }\n}\n\nexport default Home;","import React from 'react';\nimport './Participant.css';\n\nfunction Participant(props) {\n    \n    return (\n        <div key={props.id} className=\"participant\">\n            <img className=\"propic\" src={\"https://api.adorable.io/avatars/75/\" + props.id} alt={props.name + \"'s Avatar\"} />\n            <div className=\"name\">{props.name}</div>\n            <div className=\"line\"></div>\n            {props.score !== undefined && \n                <div className=\"score\">{props.score}</div>\n            }\n        </div>\n    );\n}\n\nexport default Participant;","import React from 'react';\nimport './Profile.css';\n\nclass Profile extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {name: ''};\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n  \n    handleChange(event) {\n        this.setState({name: event.target.value.trim()});\n    }\n  \n    handleSubmit(event) {\n        if (this.state.name !== '') {\n            this.props.updateName(this.state.name);\n        }\n        event.preventDefault();\n    }\n  \n    render() {\n        return (\n            <div className=\"modal-container\">\n                <div className=\"profile modal\">\n                    <img src={\"https://api.adorable.io/avatars/75/\" + this.props.id} alt=\"Your Avatar\" />\n                    <form onSubmit={this.handleSubmit}>\n                        <label>\n                            Nickname\n                            <input type=\"text\" placeholder=\"Dr. Sesame\" value={this.state.name} onChange={this.handleChange} />\n                        </label>\n                        <input type=\"submit\" value=\"Join\" disabled={this.state.name === ''} />\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Profile;","import React from 'react';\nimport './Card.css';\n\nfunction Card(props) {\n    if (props.round.playing && props.turn.pId === props.player) {\n        return (\n            <div className=\"card\">\n                <div className=\"word\">{props.turn.word}</div>\n                <div className=\"instructions\">Give clues and get someone to guess your word! No rhyming, translating, or spelling, and don't let the timer end on you!</div>\n            </div>\n        );\n    } else if (props.round.playing) {\n        return (\n            <div className=\"card flipped\">\n                <img src={\"https://api.adorable.io/avatars/75/\" + props.turn.pId} alt={props.turn.pId + \"'s Avatar\"} />\n                <div className=\"instructions\">Be the first to guess the word to earn points!</div>\n            </div>\n        );    \n    } else {\n        return (<div></div>);\n    }\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport './Timer.css';\n\nimport blop from '../assets/sounds/blop.mp3';\nimport gong from '../assets/sounds/gong.mp3';\nimport aww from '../assets/sounds/aww.mp3';\n\nclass Timer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            remaining: this.getRemainingTime(props.start)\n        }\n        this.timer = this.timer.bind(this);\n        this.SCARY = 15;\n    }\n\n    getRemainingTime() {\n        return Math.floor((this.props.start + (this.props.duration * 1000) - new Date().getTime()) / 1000);\n    }\n\n    componentDidMount() {\n        this.blop = new Audio(blop);\n        this.blop.loop = false;\n        if (this.props.start) {\n            this.timerInterval = setInterval(this.timer, 1000);\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.start !== prevProps.start) {\n            this.timerInterval = setInterval(this.timer, 1000);\n        }\n    }\n\n    timer() {\n        let remaining = this.getRemainingTime(this.props.start);\n        this.setState({remaining});\n        if (remaining > 40 && remaining % 2 === 0) {\n            this.blop.play();\n        } else if (remaining <= 40 && remaining > this.SCARY) {\n            this.blop.play();\n        } else if (remaining <= this.SCARY && remaining > 0) {\n            this.blop.play();\n            setTimeout(() => { this.blop.play(); }, 500);\n        } else if (remaining === 0) {\n            if (this.props.isPlayersTurn) {\n                let awwAudio = new Audio(aww);\n                awwAudio.play();\n            }\n            let gongAudio = new Audio(gong);\n            gongAudio.play();\n        } else if (remaining <= 0) {\n            clearInterval(this.timerInterval);\n        }\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerInterval);\n    }\n    \n    render() {\n        if (this.state.remaining) {\n            return (\n                <div>\n                    <div className={this.state.remaining <= this.SCARY ? \"timer scary\" : \"timer\"}>{this.state.remaining}</div>\n                </div>\n            );    \n        }\n        return (<div></div>);\n    }\n}\n\nexport default Timer;","import React from 'react';\nimport './Chat.css';\n\nfunction Chat(props) {\n    let prevSender = \"\";\n    const chat = props.chat.map((message, i) => {\n        let senderText;\n        if (message.sender && message.sender !== prevSender) {\n            senderText = (<div className=\"sender\">{props.participants[message.sender].name}</div>);\n        }\n        prevSender = message.sender;\n        return (\n            <div key={i} className={message.sender ? (props.player === message.sender ? \"personal\" : \"\") : \"announcement\"}>\n                {senderText}\n                <div className=\"message\">{message.message}</div>\n            </div>\n        );\n    });\n\n    return (\n        <div className=\"chat\">{chat}</div>\n    );\n}\n\nexport default Chat;","const medium = [\"taxi cab\", \"standing ovation\", \"alarm clock\", \"tool\", \"banana peel\", \"flagpole\", \"money\", \"wallet\", \"ballpoint pen\", \"sunburn\", \"wedding ring\", \"spy\", \"baby-sitter\", \"aunt\", \"acne\", \"bib\", \"puzzle piece\", \"pawn\", \"astronaut\", \"tennis shoes\", \"blue jeans\", \"twig\", \"outer space\", \"banister\", \"batteries\", \"doghouse\", \"campsite\", \"plumber\", \"bedbug\", \"throne\", \"tiptoe\", \"log\", \"mute\", \"pogo stick\", \"stoplight\", \"ceiling fan\", \"bedspread\", \"bite\", \"stove\", \"windmill\", \"nightmare\", \"stripe\", \"spring\", \"wristwatch\", \"eat\", \"matchstick\", \"gumball\", \"bobsled\", \"bonnet\", \"flock\", \"sprinkler\", \"living room\", \"laugh\", \"snuggle\", \"sneeze\", \"bud\", \"elf\", \"headache\", \"slam dunk\", \"Internet\", \"saddle\", \"ironing board\", \"bathroom scale\", \"kiss\", \"shopping cart\", \"shipwreck\", \"funny\", \"glide\", \"lamp\", \"candlestick\", \"grandfather\", \"rocket\", \"home movies\", \"seesaw\", \"rollerblades\", \"smog\", \"grill\", \"goblin\", \"coach\", \"claw\", \"cloud\", \"shelf\", \"recycle\", \"glue stick\", \"Christmas carolers\", \"front porch\", \"earache\", \"robot\", \"foil\", \"rib\", \"robe\", \"crumb\", \"paperback\", \"hurdle\", \"rattle\", \"fetch\", \"date\", \"iPod\", \"dance\", \"cello\", \"flute\", \"dock\", \"prize\", \"dollar\", \"puppet\", \"brass\", \"firefighter\", \"huddle\", \"easel\", \"pigpen\", \"bunk bed\", \"bowtie\", \"fiddle\", \"dentist\", \"baseboards\", \"letter opener\", \"photographer\", \"magic\", \"Old Spice\", \"monster\"];\nconst adult = [\"booty call\", \"strap-on\", \"vibrator\", \"threesome\", \"g-spot\", \"scissoring\", \"lingerie\", \"mustache ride\", \"nipple tassels\", \"the shocker\", \"horny\", \"eye fucking\", \"camel toe\", \"phone sex\", \"bondage\", \"anal beads\", \"lube\", \"69\", \"glory hole\", \"penis pump\", \"missionary\", \"lap dance\", \"reverse cowgirl\", \"swinger\", \"bisexual\", \"backdoor\", \"beer goggles\", \"blue balls\", \"MLIF\", \"Moobs\", \"Sex Swing\", \"Blow Up Doll\", \"cock ring\", \"banana hammock\", \"sex on the beach\", \"blow job\", \"orgasm\", \"Brazilian Wax\"];\n\nfunction randomWord() {\n    return medium[Math.floor(Math.random() * medium.length)];\n}\n\nexport default randomWord;","import React from 'react';\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport { withRouter } from \"react-router-dom\";\nimport Participant from './Participant';\nimport Profile from './Profile';\nimport Card from './Card';\nimport Timer from './Timer';\nimport Chat from './Chat';\nimport './HotPotato.css';\n\nimport randomWord from '../data/words';\nimport cheer from '../assets/sounds/cheer.mp3';\nimport ting from '../assets/sounds/ting.mp3';\n\nclass Room extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHost: props.id === props.match.params.id,\n            connections: {},\n            round: {},\n            turn: {},\n            participants: props.id ? {[props.id]: {name: props.player, score: 0}} : {},\n            chat: []\n        };\n        this.startRound = this.startRound.bind(this);\n        this.endRound = this.endRound.bind(this);\n        this.receive = this.receive.bind(this);\n        this.sendChatMessage = this.sendChatMessage.bind(this);\n        this.nextTurn = this.nextTurn.bind(this);\n    }\n\n    componentDidMount() {\n        if (this.state.isHost) {\n            this.props.peer.on('connection', (conn) => {\n                this.setupConnection(conn);\n            });\n        } else if (this.props.id) {\n            let conn = this.props.peer.connect(this.props.match.params.id);\n            this.setupConnection(conn);\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        // ID is changed (from undefined to an actual ID)\n        if (!this.state.isHost && this.props.id !== prevProps.id) {\n            let conn = this.props.peer.connect(this.props.match.params.id);\n            this.setupConnection(conn);\n        }\n        // If name changes ()\n        if (this.props.player && this.props.player !== prevProps.player) {\n            if (this.state.isHost) {\n                this.receive({type: \"name\", name: this.props.player}, this.props.id);\n            } else {\n                this.send({type: \"name\", name: this.props.player});\n            }\n        }\n    }\n\n    setupConnection(connection) {\n        // When connection established\n        connection.on('open', () => {\n            if (this.state.isHost) {\n                this.setState((state, props) => ({\n                        connections: {...state.connections, [connection.peer]: connection}, \n                        participants: {...state.participants, [connection.peer]: {name: \"Anonymous Player\", score: 0}}\n                }), () => {\n                    this.send({type: \"sync\", prop: \"participants\", data: this.state.participants});\n                });\n            } else {\n                this.setState((state, props) => ({connections: {...state.connections, [connection.peer]: connection}}));\n            }\n        });\n\n        connection.on('error', (err) => {\n            console.error(err);\n            // Try again\n            if (this.props.id && !this.state.isHost) {\n                let conn = this.props.peer.connect(this.props.match.params.id);\n                this.setupConnection(conn);\n            }\n        });\n\n        connection.on('close', () => {\n            if (this.state.isHost) {\n                this.setState((state, props) => {\n                    let connections = {...state.connections};\n                    let participants = {...state.participants};\n                    delete connections[connection.peer];\n                    delete participants[connection.peer];\n                    return ({connections, participants});\n                }, () => {\n                    // console.log(\"Sending participants: \", this.state.participants);\n                    this.send({type: \"sync\", prop: \"participants\", data: this.state.participants});\n                });\n            }\n        });\n\n        // Receive messages\n        connection.on('data', (data) => {\n            this.receive(data, connection.peer);\n        });\n    }\n\n    send(data, connections = this.state.connections) {\n        for (const id in connections) {\n            connections[id].send(data);\n        }\n    }\n\n    receive(data, sender) {\n        switch (data.type) {\n            case \"log\":\n                console.log(data.message)\n                break;\n            case \"chat\":\n                this.addToChat(data.message, sender);\n                break;\n            case \"announcement\":\n                this.setState((state, props) => ({chat : [...state.chat, {message: data.announcement}]}));\n                break;    \n            case \"sync\":\n                this.setState({[data.prop]: data.data});\n                break;\n            case \"sound\":\n                let tingAudio = new Audio(ting);\n                tingAudio.play();\n                break;\n            case \"redirect\":\n                this.props.history.push(data.location);\n                break;\n            case \"name\":\n                let participants = {...this.state.participants};\n                if (participants[sender]) {\n                    participants[sender].name = data.name;\n                    this.sendAndReceive({type: \"sync\", prop: \"participants\", data: participants});    \n                }\n                break;\n            default:\n                console.log(\"Received \", data);\n        }\n    }\n\n    sendAndReceive(data, connections = this.state.connections) {\n        this.send(data, connections);\n        this.receive(data, this.props.id);\n    }\n\n    nextTurn() {\n        let word = randomWord();\n        let participants = Object.keys(this.state.participants);\n        let pIndex = 0;\n        if (this.state.turn.pIndex !== undefined) {\n            pIndex = this.state.turn.pIndex + 1 < participants.length ? this.state.turn.pIndex + 1: 0;\n        }\n        let turn = {\n            pId: participants[pIndex],\n            pIndex,\n            word,\n            start: new Date().getTime()\n        };\n        this.send({type: \"sync\", prop: \"turn\", data: turn});\n        this.setState({turn});\n    }\n\n    startRound() {\n        let round = {\n            playing: true,\n            start: new Date().getTime()\n        };\n        setTimeout(this.endRound, 60000);\n        this.nextTurn();\n        this.sendAndReceive({type: \"sync\", prop: \"round\", data: round});\n        this.sendAndReceive({type: \"redirect\", location: `/hotpotato/${this.props.match.params.id}/play`});\n    }\n\n    endRound() {\n        let round = {\n            playing: false\n        };\n        this.sendAndReceive({type: \"sync\", prop: \"round\", data: round});\n        // If it ends on your turn, you lose 5 points\n        let participants = {...this.state.participants};\n        let currentScore = participants[this.state.turn.pId].score;\n        participants[this.state.turn.pId].score -= currentScore > 5 ? 5 : currentScore;\n        this.sendAndReceive({type: \"announcement\", announcement: `That's time! ${participants[this.state.turn.pId].name} loses ${currentScore > 5 ? 5 : currentScore} points.`});\n        this.sendAndReceive({type: \"sync\", prop: \"participants\", data: participants});\n        this.sendAndReceive({type: \"redirect\", location: `/hotpotato/${this.props.match.params.id}/scores`});\n    }\n\n    addToChat(message, sender) {\n        if (this.state.isHost) {\n            this.send({type: \"chat\", message: {message, sender}});\n            this.setState((state, props) => ({chat : [...state.chat, {message, sender}]}));\n            if (this.state.round.playing && message && message.toLowerCase() === this.state.turn.word.toLowerCase() && this.state.turn.pId !== sender) {\n                // They got the word!\n                this.sendAndReceive({type: \"sound\", name: \"ting\"});\n                // Increment score\n                let participants = {...this.state.participants};\n                let points = 10 - Math.floor((new Date().getTime() - this.state.turn.start) / 1000); \n                points = points > 0 ? points : 1\n                participants[this.state.turn.pId].score += points;\n                participants[sender].score += points;\n                this.sendAndReceive({type: \"sync\", prop: \"participants\", data: participants});\n                // Send announcement\n                this.sendAndReceive({type: \"announcement\", announcement: `${this.state.participants[sender].name} guessed the word! ${this.state.participants[sender].name} and ${this.state.participants[this.state.turn.pId].name} both earned ${points} points.`});\n                // Start next turn\n                this.nextTurn();\n            }\n        } else {\n            this.setState((state, props) => ({chat : [...state.chat, message]}));\n        }\n    }\n\n    sendChatMessage(event) {\n        event.preventDefault();\n        let message = event.target.elements.message.value.trim();\n        if (message) {\n            if (this.state.isHost) {\n                this.addToChat(message, this.props.id);\n            } else {\n                this.send({type: \"chat\", message});\n            }\n            if (this.state.round.playing && message && message.toLowerCase() === this.state.turn.word.toLowerCase() && this.state.turn.pId !== this.props.id) {\n                let cheerAudio = new Audio(cheer);\n                cheerAudio.play();\n            }\n        }\n        event.target.elements.message.value = \"\";\n    }\n\n    render() {\n        if (!this.state.isHost && !this.state.connections[this.props.match.params.id]) {\n            return (<div className=\"loader\"></div>);\n        }\n        const participantsListed = Object.entries(this.state.participants).map((entry) => (\n            <Participant key={entry[0]} id={entry[0]} name={entry[1].name} />\n        ));\n        const participantScoreboard = Object.entries(this.state.participants).sort((partA, partB) => partB[1].score - partA[1].score).map((entry) => (\n            <Participant key={entry[0]} id={entry[0]} name={entry[1].name} score={entry[1].score} />\n        ));\n        return (\n            <Switch>\n                <Redirect exact from='/hotpotato/:id' to=\"/hotpotato/:id/lobby\" />\n                <Route path=\"/hotpotato/:id/lobby\">\n                    <div className=\"container\" id=\"lobby\">\n                        <div className=\"instructions\">\n                            <h1>Hot Potato</h1>\n                            <p>60 seconds on the clock. Take turns describing words to the other players. Correctly guess as many as you can, as quickly as you can—but don't let the timer end on your turn or you might lose it all.</p>\n                        </div>\n                        <div className=\"participants\">{participantsListed}</div>\n                        {this.state.isHost && !this.state.round.playing && Object.keys(this.state.participants).length > 1 &&\n                            <button type=\"button\" onClick={this.startRound}>Start</button>\n                        }\n                        {Object.keys(this.state.participants).length < 3 &&\n                            <p>You need at least 3 players to start. Invite friends by sharing this URL</p>\n                        }\n                        {!this.props.player && <Profile id={this.props.id} updateName={this.props.updateName} /> }\n                    </div>\n                </Route>\n                <Route path=\"/hotpotato/:id/play\">\n                    <div className=\"container\">\n                        <Chat player={this.props.id} chat={this.state.chat} participants={this.state.participants} />\n                        <main>\n                            <Timer start={this.state.round.start} duration={60} isPlayersTurn={this.props.id === this.state.turn.pId} />\n                            <Card round={this.state.round} player={this.props.id} turn={this.state.turn} />\n                            <div className=\"participants\">{participantsListed}</div>\n                        </main>\n                        <form onSubmit={this.sendChatMessage} autoComplete=\"off\" className=\"chatbar\">\n                            <input type=\"text\" id=\"message\" name=\"message\" placeholder={this.state.round.playing ? \"Enter Guess\" : \"Enter Message\"} />\n                            <input type=\"submit\" value=\"Send\" />\n                        </form>\n                    </div>\n                </Route>\n                <Route path=\"/hotpotato/:id/scores\">\n                    <div className=\"container\" id=\"scores\">\n                        <h1>Scores</h1>\n                        {participantScoreboard}\n                        {this.state.isHost && !this.state.round.playing && Object.keys(this.state.participants).length > 1 &&\n                            <button type=\"button\" onClick={this.startRound}>Next Round</button>\n                        }\n                    </div>\n                </Route>\n            </Switch>\n        );\n    }\n}\n\nexport default withRouter(Room);","import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Home from './components/Home';\nimport HotPotato from './components/HotPotato';\nimport './App.css';\n\nimport Peer from 'peerjs';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: undefined,\n      name: undefined\n    };\n    this.updateName = this.updateName.bind(this);\n  }\n\n  componentDidMount() {\n    const peer = new Peer();\n    peer.on(\"open\", (id) => {\n      console.log(\"My peer ID is: \" + id);\n      this.setState({ id, peer });\n    });\n  }\n\n  componentWillUnmount() {\n    this.state.peer.disconnect();\n  };\n\n  updateName(name) {\n    this.setState({ name });\n  }\n\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route path=\"/hotpotato/:id\">\n            <HotPotato id={this.state.id} peer={this.state.peer} player={this.state.name} updateName={this.updateName} />\n          </Route>\n          <Route path=\"/\">\n            <Home id={this.state.id} />\n          </Route>\n        </Switch>\n      </Router>\n    );  \n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}